"""
Django settings for frankfurt_school_manager project.
Generated by 'django-admin startproject' using Django 5.1.1.
For more information, see https://docs.djangoproject.com/en/5.1/topics/settings/
and https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
import os


# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Security settings
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',

    # Custom apps
    'access_control.gateway',
    'sia.sch_explorer',
    'teachers.teachers_service',
    'parents.parents_service',
    'moderator.moderators_service',

    # Tailwind/static custom apps
    'tailwind',
    'theme',
    'django_browser_reload',
]

# Tailwind configuration
TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = config('INTERNAL_IPS', default='127.0.0.1', cast=Csv())
NPM_BIN_PATH = config('NPM_BIN_PATH', default='C:/Program Files/nodejs/npm.cmd')

# Authentication
AUTHENTICATION_BACKENDS = [
    'access_control.gateway.backends.EmailAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]
AUTH_USER_MODEL = 'gateway.User'
LOGIN_URL = '/gateway/logins/'

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

# URL configuration
ROOT_URLCONF = 'frankfurt_school_manager.urls'

# Template configuration
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Removed duplicate DIRS
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application
WSGI_APPLICATION = 'frankfurt_school_manager.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.mysql'),
        'NAME': config('DB_NAME', default='frankfurt_school_manager'),
        'USER': config('DB_USER', default='root'),
        'PASSWORD': config('DB_PASSWORD', default='@Tacitus0202'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        } if config('DB_ENGINE') == 'django.db.backends.mysql' else {},
    }
}


#api's and set ups
SENDGRID_API_KEY = config('SENDGRID_API_KEY')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
SESSION_ENGINE = 'django.contrib.sessions.backends.db'


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files (already working per your confirmation)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',  # Changed to DEBUG to see debug logs
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'gateway': {  # Specific logger for our views
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}