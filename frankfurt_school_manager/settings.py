"""
Django settings for frankfurt_school_manager project.
Generated by 'django-admin startproject' using Django 5.1.1.
"""

import os
from pathlib import Path
from decouple import config, Csv

# -------------------------------------------------
# Core Paths
# -------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# -------------------------------------------------
# Security
# -------------------------------------------------
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=Csv())

# -------------------------------------------------
# Applications
# -------------------------------------------------
INSTALLED_APPS = [
    # Django default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'django_extensions',
    'rest_framework',
    'tailwind',
    'django_browser_reload',

    # Core project apps
    'students',
    'attendance',
    'notifications',

    # Custom apps
    'access_control.gateway',
    'sia.sch_explorer',
    'teachers_service',
    'parents.parents_service',
    'moderator.moderators_service',

    # Tailwind theme
    'theme',
]

# -------------------------------------------------
# Middleware
# -------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

# -------------------------------------------------
# URL / WSGI
# -------------------------------------------------
ROOT_URLCONF = 'frankfurt_school_manager.urls'
WSGI_APPLICATION = 'frankfurt_school_manager.wsgi.application'

# -------------------------------------------------
# Templates
# -------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# -------------------------------------------------
# Database
# -------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        } if config('DB_ENGINE') == 'django.db.backends.mysql' else {},
    }
}


# -------------------------------------------------
# Authentication
# -------------------------------------------------
AUTHENTICATION_BACKENDS = [
    'access_control.gateway.backends.EmailAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]
AUTH_USER_MODEL = 'gateway.User'
LOGIN_URL = '/gateway/logins/'

# -------------------------------------------------
# REST Framework
# -------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# -------------------------------------------------
# Tailwind
# -------------------------------------------------
TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = config('INTERNAL_IPS', default='127.0.0.1', cast=Csv())
NPM_BIN_PATH = config('NPM_BIN_PATH', default='C:/Program Files/nodejs/npm.cmd')

# -------------------------------------------------
# Email / API Keys
# -------------------------------------------------
SENDGRID_API_KEY = config('SENDGRID_API_KEY')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')

# -------------------------------------------------
# Sessions
# -------------------------------------------------
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# -------------------------------------------------
# Password Validators
# -------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# -------------------------------------------------
# Internationalization
# -------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# -------------------------------------------------
# Static & Media
# -------------------------------------------------
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# -------------------------------------------------
# Default PK
# -------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------
# Logging
# -------------------------------------------------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {'class': 'logging.StreamHandler', 'level': 'DEBUG'},
    },
    'loggers': {
        '': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': True},
        'django': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': True},
        'gateway': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': False},
    },
}
