# Generated by Django 5.1.1 on 2024-10-09 22:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('physical_address', models.CharField(max_length=255)),
                ('digital_address', models.CharField(max_length=255)),
                ('population', models.PositiveIntegerField()),
                ('official_telephone_number', models.CharField(max_length=13)),
                ('year_established', models.PositiveIntegerField()),
                ('email', models.EmailField(max_length=254)),
                ('social_media', models.CharField(blank=True, max_length=255, null=True)),
                ('logo', models.ImageField(upload_to='school_logos/')),
                ('registration_number', models.CharField(max_length=50, unique=True)),
                ('principal_name', models.CharField(max_length=255)),
                ('board_of_directors', models.TextField(blank=True, null=True)),
                ('motto', models.CharField(blank=True, max_length=255, null=True)),
                ('school_type', models.CharField(choices=[('Public', 'Public'), ('Private', 'Private'), ('International', 'International')], max_length=50)),
                ('levels', models.CharField(blank=True, max_length=255, null=True)),
                ('number_of_teachers', models.PositiveIntegerField(default=0)),
                ('number_of_classrooms', models.PositiveIntegerField(default=0)),
                ('facilities', models.TextField(blank=True, null=True)),
                ('extra_curricular_activities', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'Schools',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=13)),
                ('role', models.CharField(choices=[('Principal', 'Principal'), ('VicePrincipal', 'Vice Principal'), ('GeneralAdmin', 'General Admin')], max_length=50)),
                ('can_manage_timetable', models.BooleanField(default=True)),
                ('can_manage_scheme_of_work', models.BooleanField(default=True)),
                ('can_view_grades', models.BooleanField(default=True)),
                ('can_edit_grades', models.BooleanField(default=False)),
                ('can_manage_exams', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='admin_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='admin_permission_set', to='auth.permission')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gateway.school')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('other_names', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('date_of_birth', models.DateField()),
                ('date_joined', models.DateField()),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('teacher', 'Teacher'), ('student', 'Student'), ('parent', 'Parent')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='registrations_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='registrations_user_permissions_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_taught', models.CharField(max_length=255)),
                ('hire_date', models.DateField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gateway.user')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField()),
                ('grade', models.CharField(max_length=10)),
                ('enrollment_date', models.DateField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gateway.user')),
            ],
        ),
        migrations.CreateModel(
            name='ParentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation', models.CharField(max_length=50)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='gateway.studentprofile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gateway.user')),
            ],
        ),
    ]
